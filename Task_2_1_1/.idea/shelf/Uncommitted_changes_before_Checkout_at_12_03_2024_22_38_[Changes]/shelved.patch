Index: src/main/java/ru/nsu/kozoliy/ChartBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.nsu.kozoliy;\r\n\r\nimport java.awt.BorderLayout;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.SwingUtilities;\r\nimport org.jfree.chart.ChartFactory;\r\nimport org.jfree.chart.ChartPanel;\r\nimport org.jfree.chart.JFreeChart;\r\nimport org.jfree.data.category.DefaultCategoryDataset;\r\n\r\n\r\n/**\r\n * This class builds a chart comparing the execution times of different solutions.\r\n */\r\npublic class ChartBuilder {\r\n\r\n    /**\r\n     * Main method to run the program and display the chart.\r\n     */\r\n    public static void main(String[] args) {\r\n        // Create arrays with sample data\r\n        long[] smallArray = {20319251, 6997901, 6997927, 6997937, 17858849, 6997967,\r\n            6998009, 6998029, 6998039, 20165149, 6998051, 6998053,\r\n            20319251, 6997901, 6997927, 6997937, 17858849, 6997967,\r\n            6998009, 6998029, 6998039, 20165149, 6998051, 6998053,\r\n            20319251, 6997901, 6997927, 6997937, 17858849, 6997967,\r\n            6998009, 6998029, 6998039, 20165149, 6998051, 6998053,\r\n            20319251, 6997901, 6997927, 6997937, 17858849, 6997967,\r\n            6998009, 6998029, 6998039, 20165149, 6998051, 6998053,\r\n            20319251, 6997901, 6997927, 6997937, 17858849, 6997967,\r\n            6998009, 6998029, 6998039, 20165149, 6998051, 6998053};\r\n\r\n        long prime = 1000000007;\r\n        long[] largeArray = new long[1000];\r\n        for (int i = 0; i < 1000; i++) {\r\n            largeArray[i] = prime;\r\n        }\r\n\r\n        // Perform sequential detection for small array\r\n        long startTimeSequential = System.nanoTime();\r\n        boolean resultSequential = SequentialDetector.sequentialNoPrimesDetector(smallArray);\r\n        long endTimeSequential = System.nanoTime();\r\n        long timeElapsedSequentialSmallArray = endTimeSequential - startTimeSequential;\r\n\r\n        System.out.println(\"Sequential Solution Result: \" + resultSequential);\r\n        System.out.println(\"Time Elapsed for Sequential Solution Small Array: \"\r\n                + timeElapsedSequentialSmallArray + \" nanoseconds\");\r\n\r\n        // Perform sequential detection for large array\r\n        startTimeSequential = System.nanoTime();\r\n        resultSequential = SequentialDetector.sequentialNoPrimesDetector(largeArray);\r\n        endTimeSequential = System.nanoTime();\r\n        long timeElapsedSequentialLargeArray = endTimeSequential - startTimeSequential;\r\n\r\n        System.out.println(\"Sequential Solution Result: \" + resultSequential);\r\n        System.out.println(\"Time Elapsed for Sequential Solution Large Array: \"\r\n                + timeElapsedSequentialLargeArray + \" nanoseconds\");\r\n\r\n        // Perform parallel stream detection for small array\r\n        long startTimeParallelStream = System.nanoTime();\r\n        boolean resultParallelStream = ParallelStreamDetector\r\n                .parallelStreamNoPrimesDetector(smallArray);\r\n        long endTimeParallelStream = System.nanoTime();\r\n        long timeElapsedParallelStreamSmallArray = endTimeParallelStream - startTimeParallelStream;\r\n\r\n        System.out.println(\"Parallel Stream Solution Result: \" + resultParallelStream);\r\n        System.out.println(\"Time Elapsed for Parallel Stream Solution: \"\r\n                + timeElapsedParallelStreamSmallArray + \" nanoseconds\");\r\n\r\n        // Perform parallel stream detection for large array\r\n        startTimeParallelStream = System.nanoTime();\r\n        ParallelStreamDetector.parallelStreamNoPrimesDetector(largeArray);\r\n        endTimeParallelStream = System.nanoTime();\r\n        long timeElapsedParallelStreamLargeArray = endTimeParallelStream - startTimeParallelStream;\r\n\r\n        System.out.println(\"Parallel Stream Solution Result: \" + resultParallelStream);\r\n        System.out.println(\"Time Elapsed for Parallel Stream Solution: \"\r\n                + timeElapsedParallelStreamLargeArray + \" nanoseconds\");\r\n\r\n        // Perform parallel detection with different number of threads for small array\r\n        long startTimeParallel;\r\n        long endTimeParallel;\r\n        long timeElapsedParallel;\r\n        long[] arrayOfResultSmallArray = new long[9];\r\n        for (int numOfThreads = 2; numOfThreads <= 10; numOfThreads++) {\r\n            startTimeParallel = System.nanoTime();\r\n            ParallelDetector.parallelNoPrimesDetector(smallArray, numOfThreads);\r\n            endTimeParallel = System.nanoTime();\r\n            timeElapsedParallel = endTimeParallel - startTimeParallel;\r\n            arrayOfResultSmallArray[numOfThreads - 2] = timeElapsedParallel;\r\n        }\r\n\r\n        // Perform parallel detection with different number of threads for large array\r\n        long[] arrayOfResultLargeArray = new long[9];\r\n        for (int numOfThreads = 2; numOfThreads <= 10; numOfThreads++) {\r\n            startTimeParallel = System.nanoTime();\r\n            ParallelDetector.parallelNoPrimesDetector(largeArray, numOfThreads);\r\n            endTimeParallel = System.nanoTime();\r\n            timeElapsedParallel = endTimeParallel - startTimeParallel;\r\n            arrayOfResultLargeArray[numOfThreads - 2] = timeElapsedParallel;\r\n        }\r\n\r\n        /*\r\n        // Create and display the chart\r\n        javax.swing.SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(\"Execution Time Comparison\");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setLayout(new BorderLayout());\r\n\r\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\r\n            dataset.addValue(timeElapsedSequentialSmallArray, \"Sequential Detector\",\r\n                    \"Sequential\");\r\n            dataset.addValue(timeElapsedSequentialLargeArray, \"Sequential Detector Large\",\r\n                    \"Sequential\");\r\n            dataset.addValue(arrayOfResultSmallArray[0], \"Parallel Detector\",\r\n                    \"Threads: 2\");\r\n            dataset.addValue(arrayOfResultLargeArray[0], \"Parallel Detector Large\",\r\n                    \"Threads: 2\");\r\n            dataset.addValue(arrayOfResultSmallArray[1], \"Parallel Detector\",\r\n                    \"Threads 3\");\r\n            dataset.addValue(arrayOfResultLargeArray[1], \"Parallel Detector Large\",\r\n                    \"Threads 3\");\r\n            dataset.addValue(arrayOfResultSmallArray[2], \"Parallel Detector\",\r\n                    \"Threads: 4\");\r\n            dataset.addValue(arrayOfResultLargeArray[2], \"Parallel Detector Large\",\r\n                    \"Threads: 4\");\r\n            dataset.addValue(arrayOfResultSmallArray[3], \"Parallel Detector\",\r\n                    \"Threads: 5\");\r\n            dataset.addValue(arrayOfResultLargeArray[3], \"Parallel Detector Large\",\r\n                    \"Threads: 5\");\r\n            dataset.addValue(arrayOfResultSmallArray[4], \"Parallel Detector\",\r\n                    \"Threads 6\");\r\n            dataset.addValue(arrayOfResultLargeArray[4], \"Parallel Detector Large\",\r\n                    \"Threads 6\");\r\n            dataset.addValue(arrayOfResultSmallArray[5], \"Parallel Detector\",\r\n                    \"Threads 7\");\r\n            dataset.addValue(arrayOfResultLargeArray[5], \"Parallel Detector Large\",\r\n                    \"Threads 7\");\r\n            dataset.addValue(arrayOfResultSmallArray[6], \"Parallel Detector\",\r\n                    \"Threads: 8\");\r\n            dataset.addValue(arrayOfResultLargeArray[6], \"Parallel Detector Large\",\r\n                    \"Threads: 8\");\r\n            dataset.addValue(arrayOfResultSmallArray[7], \"Parallel Detector\",\r\n                    \"Threads: 9\");\r\n            dataset.addValue(arrayOfResultLargeArray[7], \"Parallel Detector Large\",\r\n                    \"Threads: 9\");\r\n            dataset.addValue(arrayOfResultSmallArray[8], \"Parallel Detector\",\r\n                    \"Threads: 10\");\r\n            dataset.addValue(arrayOfResultLargeArray[8], \"Parallel Detector Large\",\r\n                    \"Threads: 10\");\r\n            dataset.addValue(timeElapsedParallelStreamSmallArray, \"ParallelStream Detector\",\r\n                    \"Type 10\");\r\n            dataset.addValue(timeElapsedParallelStreamLargeArray,\r\n                    \"ParallelStream Detector Large\", \"Type 10\");\r\n\r\n            JFreeChart chart = ChartFactory.createBarChart(\r\n                    \"Execution Time Comparison\",\r\n                    \"Solution Type\",\r\n                    \"Execution Time (nanoseconds)\",\r\n                    dataset\r\n            );\r\n\r\n            ChartPanel chartPanel = new ChartPanel(chart);\r\n            frame.setLayout(new BorderLayout());\r\n            frame.add(chartPanel, BorderLayout.CENTER);\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n\r\n\r\n        */\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/nsu/kozoliy/ChartBuilder.java b/src/main/java/ru/nsu/kozoliy/ChartBuilder.java
--- a/src/main/java/ru/nsu/kozoliy/ChartBuilder.java	(revision 1f328e7a2800183c0e1757e9fba3a65de39709eb)
+++ b/src/main/java/ru/nsu/kozoliy/ChartBuilder.java	(date 1708405854635)
@@ -31,8 +31,8 @@
             6998009, 6998029, 6998039, 20165149, 6998051, 6998053};
 
         long prime = 1000000007;
-        long[] largeArray = new long[1000];
-        for (int i = 0; i < 1000; i++) {
+        long[] largeArray = new long[100000];
+        for (int i = 0; i < 100000; i++) {
             largeArray[i] = prime;
         }
 
@@ -100,7 +100,7 @@
             arrayOfResultLargeArray[numOfThreads - 2] = timeElapsedParallel;
         }
 
-        /*
+
         // Create and display the chart
         javax.swing.SwingUtilities.invokeLater(() -> {
             JFrame frame = new JFrame("Execution Time Comparison");
@@ -169,6 +169,6 @@
         });
 
 
-        */
+
     }
 }
